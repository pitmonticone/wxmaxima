# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# Find more information at:
# https://github.com/microsoft/msvc-code-analysis-action

name: Microsoft C++ Code Analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '43 4 * * 6'

env:
  # Path to the CMake build directory.
  build: '${{ github.workspace }}/build'
  # The wxWidgets version as referred to in the source package
  WXVERSION: 3.2.2.1
  # The wxWidgets version as referred to in the build folder
  # Typically it'd be the wxWidgets version with an optional suffix
  # to indicate build "epoch". The epoch changes are used to invalidate
  # a cached wxWidgets build and force a rebuild.
  WXBUILDVER: 3.2.2.1_0
  CMAKEGEN: "Ninja"

permissions:
  contents: read

jobs:
  analyze:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Analyze
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Compile and install wxWidgets
        run: |
             $SRC_ARCHIVE="wxWidgets-${env:WXVERSION}.7z"
             $BUILD_DIR="C:\wxwidgets-build_${env:WXBUILDVER}"
             $INSTALL_DIR="C:\wxwidgets-install_${env:WXBUILDVER}"
             $INSTALL_LIB_DIR="$INSTALL_DIR\lib\${env:WXW_LIB}"
             $SOURCE_DIR="C:\wxwidgets-source_${env:WXVERSION}"
             # If there's no installation of wxWidgets available, we have to build it
             if (!(Test-Path $INSTALL_DIR)) {
                 echo '- No wxWidgets installation $INSTALL_DIR was found'
                 echo '* Downloading wxWidgets sources'
                 Start-FileDownload "https://github.com/wxWidgets/wxWidgets/releases/download/v${env:WXVERSION}/$SRC_ARCHIVE"
                 echo '* Unpacking wxWidgets sources'
                 7z x "$SRC_ARCHIVE" "-o$SOURCE_DIR" -y
                 echo '* Building wxWidgets from sources'
                 mkdir $BUILD_DIR | Out-Null
                 pushd $BUILD_DIR
                 echo cmake -G "Visual Studio 17 2022" -DCMAKE_BUILD_TYPE=Release  `
                   -DwxBUILD_SHARED=NO  `
                   -DwxUSE_STC=NO  `
                   -DwxUSE_RIBBON=NO  `
                   "-DCMAKE_INSTALL_PREFIX=$INSTALL_DIR" -Wno-dev `
                   "$SOURCE_DIR"
                 cmake -G "Visual Studio 17 2022"  -DCMAKE_BUILD_TYPE=Release  `
                   -DwxBUILD_SHARED=NO  `
                   -DwxUSE_STC=NO  `
                   -DwxUSE_RIBBON=NO  `
                   "-DCMAKE_INSTALL_PREFIX=$INSTALL_DIR" -Wno-dev `
                   "$SOURCE_DIR"
                 cmake --build .
                 cmake --install .
                 popd
          
      - name: Configure CMake
        run: cmake -B ${{ env.build }}

      # Build is not required unless generated source files are used
      # - name: Build CMake
      #   run: cmake --build ${{ env.build }}

      - name: Initialize MSVC Code Analysis
        uses: microsoft/msvc-code-analysis-action@04825f6d9e00f87422d6bf04e1a38b1f3ed60d99
        # Provide a unique ID to access the sarif output path
        id: run-analysis
        with:
          cmakeBuildDirectory: ${{ env.build }}
          # Ruleset file that will determine what checks will be run
          ruleset: NativeRecommendedRules.ruleset

      # Upload SARIF file to GitHub Code Scanning Alerts
      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.run-analysis.outputs.sarif }}

      # Upload SARIF file as an Artifact to download and view
      # - name: Upload SARIF as an Artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: sarif-file
      #     path: ${{ steps.run-analysis.outputs.sarif }}
